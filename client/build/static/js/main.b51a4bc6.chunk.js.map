{"version":3,"sources":["Pages/Tokenizer/Tokenizer.js","Pages/PaintBoard/container/Container.jsx","Pages/PaintBoard/canvas/Canvas.jsx","helper/getLinkInfo.js","Pages/Lobby/Lobby.js","helper/getWeb3.js","helper/serviceWorker.js","index.js"],"names":["tokenizer_toggle","container_toggle","base64ImageData","artworkTitle","roomID","Canvas","props","socket","io","connect","roomId","state","room","on","room_ID","imageData","image","Image","ctx","document","querySelector","getContext","onload","drawImage","src","data","lineWidth","lineJoin","strokeStyle","color","lineCap","beginPath","moveTo","pmx","pmy","lineTo","mx","my","closePath","stroke","this","setup","drawOnCanvas","newProps","size","console","log","id","emit","canvas","sketch","sketch_style","getComputedStyle","width","parseInt","getPropertyValue","height","mouse","x","y","last_mouse","addEventListener","e","pageX","offsetLeft","pageY","offsetTop","onPaint","removeEventListener","root","toDataURL","className","React","Component","Tokenizer","useState","undefined","recipient","setRecipient","symbol","setSymbol","name","setName","description","setDescription","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","dataURLtoFile","artwork","result","setResult","back","setBack","paintBoardLink","ReturnTokenInfo","value","artwork_link","metadata_link","token_address","token_ID","path","onClick","to","onChange","event","target","a","require","config","client","NFTStorage","token","process","store","metadata","export_contract","methods","createToken","url","send","from","export_accounts","links","pathname","slice","ipnft","events","printAddress","returnValues","printTokenID","Container","tokenizerLink","tokenize","setTokenize","setColor","eraser","setEraser","setSize","min","max","getLinkInfo","linkType","slashCount","i","replace","getWeb3","Promise","resolve","reject","window","ethereum","web3","Web3","enable","provider","providers","HttpProvider","New_Lobby","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","TokenGenerator","networks","instance","Contract","abi","address","alert","error","connectMetaMask","showPaint","uuidv4","uuid","v4","setArtworkTitle","bind","startRoom","joinRoom","setRoom","location","href","setState","linkInfo","isExist","placeholder","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b51a4bc6.chunk.js","sourcesContent":["import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport PaintBoard from \"../PaintBoard/container/Container.jsx\";\nimport { base64ImageData } from \"../PaintBoard/canvas/Canvas\";\nimport { export_accounts, export_contract } from \"../Lobby/Lobby\";\nimport { NFTStorage, File } from 'nft.storage';\nimport React, { useState } from \"react\";\nimport \"./Tokenizer.css\";\n\nvar tokenizer_toggle;\n\nconst Tokenizer = (props) => {\n  const roomId = props.room;\n  const artworkTitle = props.artworkTitle;\n  const [recipient, setRecipient] = useState(undefined);\n  const [symbol, setSymbol] = useState(undefined);\n  const [name, setName] = useState(undefined);\n  const [description, setDescription] = useState(undefined);\n  const [artwork] = useState(dataURLtoFile(base64ImageData, 'paint.png'));\n  const [result, setResult] = useState(undefined);\n  const [back, setBack] = useState(false);\n  const [paintBoardLink] = useState(\"/PaintBoard/room=\" + roomId);\n\n  //Converts the base64 image data to an image file\n  function dataURLtoFile(dataurl, filename) {\n    var arr = dataurl.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]), \n        n = bstr.length, \n        u8arr = new Uint8Array(n);\n    while(n--){\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new File([u8arr], filename, {type:mime});\n  }\n\n  // Create IPFS & Metadata then pin the data on the nft.storage\n  function tokenize() {\n    const createToken = async () => {\n      require('dotenv').config()\n      const client = new NFTStorage({ token: process.env.REACT_APP_SECRET_APIKEY })\n      const metadata = await client.store({\n        name: name,\n        description: description,\n        image: new File([artwork], artwork.name, { type: artwork.type })\n      })\n      const result = await export_contract.methods.createToken(recipient, description, symbol, metadata.url).send({ from: export_accounts[0] });\n      const links = {\n        artwork_link: `ipfs.io/ipfs/${metadata.data.image.pathname.slice(2)}`,\n        metadata_link: `ipfs.io/ipfs/${metadata.ipnft}/metadata.json`,\n        token_address: result.events.printAddress.returnValues.value,\n        token_ID: result.events.printTokenID.returnValues.value\n      }\n      setResult(links);\n    };\n    createToken();\n  }\n\n  // Returns the following values on the frontend:\n  // artwork & metadatas' IPFS links, Token address and Token ID\n  function ReturnTokenInfo() {\n    if (result != null) {\n      return (\n        <div id='renderResult'>\n          <label>Artowkr Link:</label>\n          <input type='text' value={result.artwork_link} />\n          <label>Metadata Link:</label>\n          <input type='text' value={result.metadata_link} />\n          <label>Token address:</label>\n          <input type='text' value={result.token_address} />\n          <label>Token ID:</label>\n          <input type='text' value={result.token_ID} />\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <label>No Transaction Record</label>\n        </div>\n      )\n    }\n  }\n\n  return (\n    <Router>\n      <div className=\"Tokenizer\">\n        {!back? (\n          <div className=\"Contents\">\n            <button onClick={() => {\n              setBack(true);\n              tokenizer_toggle = !tokenizer_toggle;\n              }}>\n              <Link to={paintBoardLink}>Back</Link>\n            </button>\n            <header>Digital Artwork Minter</header>\n            <p>Convert your digital art work to a Non-fungible token!</p>\n            <img src={base64ImageData} />\n            <div>\n              <label>Recipient :</label>\n              <input type='text' onChange={(event) => {setRecipient(event.target.value); }} />\n            </div>\n            <div>\n              <label>Token Symbol :</label>\n              <input type='text' onChange={(event) => {setSymbol(event.target.value); }} />\n            </div>\n            <div>\n              <label>Token Name :</label>\n              <input type='text' onChange={(event) => {setName(event.target.value); }} />\n            </div>\n            <div>\n              <label>Token Description :</label>\n              <input type='text' onChange={(event) => {setDescription(event.target.value); }} />\n            </div>\n            <button onClick={tokenize}>Tokenize</button>\n            <ReturnTokenInfo />\n          </div>\n        ) : (\n          <Switch>\n          <Route path={paintBoardLink}>\n            <PaintBoard room={roomId} artworkTitle={artworkTitle}/>\n          </Route>\n        </Switch>\n        )}\n      </div>\n    </Router>\n  );\n}\n\nexport {tokenizer_toggle};\nexport default Tokenizer;","import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport React, { useState } from 'react';\nimport Tokenizer from '../../Tokenizer/Tokenizer';\nimport Canvas, { base64ImageData } from '../canvas/Canvas';\nimport './Container.css';\n\nvar container_toggle;\n\nfunction Container({ room, artworkTitle }) {\n    const [tokenizerLink] = useState(\"/Tokenizer/room=\" + room);\n    const [tokenize, setTokenize] = useState(false);\n    const [color, setColor] = useState(\"#C83349\");\n    const [eraser, setEraser] = useState(false);\n    const [size, setSize] = useState(5);\n\n    function tokenizer() {\n        if (base64ImageData != null) {\n            setTokenize(true);\n            container_toggle = !container_toggle;\n        }\n    }\n\n    const handleEraser = () => {\n        setEraser(!eraser);\n    }\n\n    return (\n        <Router>\n            <div className=\"Container\">\n                {!tokenize? (\n                    <div className=\"PaintBoard\">\n                        <header>Let's Paint {artworkTitle}!</header>\n                        <p>Room ID: {room}</p>\n                        <p>Brush size: {size}</p>\n                        <div className=\"painting_tools\">\n                            <input\n                                min={1}\n                                max={30}\n                                name=\"\"\n                                id=\"size\"\n                                type=\"range\"\n                                value={size} \n                                onChange={(event) => { setSize(event.target.value); }}\n                            />\n                            <input\n                                id=\"color\"\n                                type=\"color\"\n                                value={color}\n                                onChange={(event) => { setColor(event.target.value); }}\n                            />\n                            <button id=\"eraser\" onClick={handleEraser}>\n                                {(eraser === false) ? <div> Brush </div> : <div> Eraser </div>}\n                            </button>\n                        </div>\n                        <div className=\"canvas\">\n                            <Canvas\n                                color={(eraser === false) ? color : \"#FFFFFF\"}\n                                artworkTitle={artworkTitle}\n                                size={size}\n                                room={room}\n                            />\n                        </div>\n                        <div className=\"createImage\">\n                            <button onClick={tokenizer}>\n                                <Link to={tokenizerLink}>Tokenize</Link>\n                            </button>\n                        </div>\n                    </div>\n                ) : (\n                <Switch>\n                    <Route path={tokenizerLink}>\n                      <Tokenizer room={room} artworkTitle={artworkTitle} />\n                    </Route>\n                </Switch>\n                )}\n            </div>\n        </Router>\n    )\n}\n\nexport {container_toggle};\nexport default Container;\n\n","import { container_toggle } from '../container/Container';\nimport { tokenizer_toggle } from '../../Tokenizer/Tokenizer';\nimport io from 'socket.io-client';\nimport React from 'react';\nimport './Canvas.css';\n\nvar base64ImageData = null;\nvar artworkTitle = null;\nvar roomID = null;\n\nclass Canvas extends React.Component {\n    socket = io.connect(\"http://localhost:5000\");\n    artworkTitle = null;\n    roomId = null;\n    ctx;\n\n    constructor(props) {\n        super(props);\n        this.state = { room: this.props.room, artworkTitle: this.props.artworkTitle };\n        this.artworkTitle = this.state.artworkTitle;\n        artworkTitle = this.state.artworkTitle;\n        this.roomId = this.state.room;\n        roomID = this.state.room;\n        this.socket.on(\"synchronize\", function (room_ID, imageData) {\n            if ((container_toggle === tokenizer_toggle) && room_ID === roomID) {\n                    var image = new Image();\n                    var canvas = document.querySelector('#canvas');\n                    var ctx = canvas.getContext('2d');\n                    image.onload = function () {\n                        ctx.drawImage(image, 0, 0);\n                    };\n                    image.src = imageData;\n                    base64ImageData = imageData;\n            }\n        })\n        this.socket.on(\"canvas-data\", function (room_ID, data) {\n            if ((container_toggle === tokenizer_toggle) && room_ID === roomID) {\n                var canvas = document.querySelector('#canvas');\n                var ctx = canvas.getContext('2d');\n                ctx.lineWidth = data.lineWidth;\n                ctx.lineJoin = data.lineJoin;\n                ctx.strokeStyle = data.color;\n                ctx.lineCap = data.lineCap;\n                ctx.beginPath();\n                ctx.moveTo(data.pmx, data.pmy);\n                ctx.lineTo(data.mx, data.my);\n                ctx.closePath();\n                ctx.stroke();\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.setup();\n        this.drawOnCanvas();\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.ctx.strokeStyle = newProps.color;\n        this.ctx.lineWidth = newProps.size;\n    }\n\n    setup() {\n        this.socket.on(\"connect\", () => {\n            console.log(\"Connected socket id \" + this.socket.id + \" to artwork: \" + artworkTitle);\n            this.socket.emit(\"createRoom\", this.roomId, artworkTitle);\n        });\n    }\n\n    drawOnCanvas() {\n        var canvas = document.querySelector('#canvas');\n        this.ctx = canvas.getContext('2d');\n        var ctx = this.ctx;\n        var sketch = document.querySelector('#sketch');\n        var sketch_style = getComputedStyle(sketch);\n        canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n        canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n        var mouse = { x: 0, y: 0 };\n        var last_mouse = { x: 0, y: 0 };\n\n        ctx.lineWidth = this.props.size;\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = this.props.color;\n\n        canvas.addEventListener('mousemove', function (e) {\n            last_mouse.x = mouse.x;\n            last_mouse.y = mouse.y;\n            mouse.x = e.pageX - this.offsetLeft;\n            mouse.y = e.pageY - this.offsetTop;\n        }, false);\n\n        canvas.addEventListener('mousedown', function (e) {\n            canvas.addEventListener('mousemove', onPaint, false);\n        }, false);\n\n        canvas.addEventListener('mouseup', function () {\n            canvas.removeEventListener('mousemove', onPaint, false);\n        }, false);\n\n        var root = this;\n        var onPaint = function () {\n            ctx.beginPath();\n            ctx.moveTo(last_mouse.x, last_mouse.y);\n            ctx.lineTo(mouse.x, mouse.y);\n            ctx.closePath();\n            ctx.stroke();\n            let data = {\n                mx: mouse.x,\n                my: mouse.y,\n                pmx: last_mouse.x,\n                pmy: last_mouse.y,\n                lineWidth: ctx.lineWidth,\n                lineJoin: 'round',\n                lineCap: 'round',\n                color: ctx.strokeStyle\n            }\n            base64ImageData = canvas.toDataURL(\"image/png\");\n            root.socket.emit(\"canvas-data\", root.roomId, data, base64ImageData);\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"sketch\" id=\"sketch\">\n                <canvas className=\"canvas\" id=\"canvas\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport {base64ImageData};\nexport default Canvas","function getLinkInfo(url) {\n    var roomId = \"\";\n    var linkType = \"\";\n    var slashCount = 0;\n\n    for (var i = 0; i < url.length; i++) {\n        if (url[i] === \"/\") {\n            slashCount++;\n        } else if (slashCount === 3) {\n            linkType += url[i];\n        } else if (slashCount === 4) {\n            roomId += url[i];\n        } else if (slashCount > 4) {\n            break;\n        }\n    }\n    roomId = roomId.replace('room=', '');\n\n    return [linkType, roomId];\n}\n\nexport default getLinkInfo;","import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport PaintBoard from '../PaintBoard/container/Container';\nimport getLinkInfo from '../../helper/getLinkInfo';\nimport io from 'socket.io-client';\nimport React from 'react';\nimport uuid from 'uuid';\nimport './Lobby.css';\n\nimport Web3 from \"web3\";\nimport getWeb3 from \"../../helper/getWeb3\";\nimport TokenGenerator from \"../../contracts/TokenGenerator.json\";\n\nlet socket;\nconst CONNECTION_PORT = 'http://localhost:5000';\n\nlet export_accounts;\nlet export_contract;\n\nclass New_Lobby extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            room: \"\",\n            artworkTitle: \"\",\n            showPaint: false,\n            uuidv4: uuid.v4(),\n            paintBoardLink: \"\",\n        };\n        this.setArtworkTitle = this.setArtworkTitle.bind(this);\n        this.startRoom = this.startRoom.bind(this);\n        this.joinRoom = this.joinRoom.bind(this);\n        this.setRoom = this.setRoom.bind(this);\n    }\n\n\n    componentWillMount(url = window.location.href) {\n        socket = io.connect(CONNECTION_PORT);\n        this.setState({paintBoardLink: \"/PaintBoard/room=\" + this.state.uuidv4});\n        let linkInfo = getLinkInfo(url);\n        if (linkInfo[0] === \"PaintBoard\" || linkInfo[0] === \"Tokenizer\") {\n            socket.on(\"connect\", () => {\n                socket.emit(\"checkRoomID_Call\", linkInfo[1]);\n                socket.on(\"checkRoomID_Return\", (isExist, artworkTitle) => {\n                    if (isExist) {\n                        console.log(\"This room ID does exists!\");\n                        console.log(\"Connecting to the room...\");\n                        this.setState({paintBoardLink: \"/PaintBoard/room=\" + linkInfo[1]});\n                        this.setState({room: linkInfo[1]});\n                        this.setState({artworkTitle: artworkTitle});\n                        this.setState({showPaint: true});\n                        if (linkInfo[0] === \"Tokenizer\") {\n                            console.log(\"Redirecting to the painting board...\");\n                            if (typeof window !== 'undefined') {\n                                window.location.href = \"http://localhost:3000\" + this.state.paintBoardLink;\n                            }\n                        }\n                    } else {\n                        console.log(\"This room ID does not exist.\");\n                        console.log(\"Redirecting to the lobby...\");\n                        if (typeof window !== 'undefined') {\n                            window.location.href = \"http://localhost:3000/Lobby\";\n                        }\n                    }\n                });\n            });\n        } else if (linkInfo[0] === \"Lobby\") {\n            console.log(\"Welcome to collaborative painting & tokenizer!\");\n        } else {\n            console.log(\"Error: Invalid Link, Redirecting to the lobby...\");\n            if (typeof window !== 'undefined') {\n                window.location.href = \"http://localhost:3000/Lobby\";\n            }\n        }\n    }\n\n    componentDidMount = async () => {\n        try {\n            const web3 = await getWeb3();\n            const accounts = await web3.eth.getAccounts();\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = TokenGenerator.networks[networkId];\n            const instance = new web3.eth.Contract(\n                TokenGenerator.abi,\n                deployedNetwork && deployedNetwork.address,\n            );\n            export_accounts = accounts;\n            export_contract = instance;\n        } catch (error) {\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n                );\n            console.error(error);\n        }\n    };\n\n    connectMetaMask = async() => {\n        var web3;\n        if (window.ethereum) {\n        web3 = new Web3(window.ethereum);\n        try {\n            await window.ethereum.enable();\n        } catch (error) {\n            console.log(error);\n        }\n        }\n        else if (window.web3) {\n        web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        }\n        else {\n        const provider = new Web3.providers.HttpProvider(\n            \"http://127.0.0.1:8545\"\n        );\n        web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        }\n        const accounts = await web3.eth.getAccounts();\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = TokenGenerator.networks[networkId];\n        const instance = new web3.eth.Contract(\n        TokenGenerator.abi,\n        deployedNetwork && deployedNetwork.address,\n        );\n        export_accounts = accounts;\n        export_contract = instance;\n      }\n\n    startRoom() {\n        if (this.state.artworkTitle !== \"\") {\n            this.setState({showPaint: true});\n            this.setState({room: this.state.uuidv4});\n        }\n    };\n\n    joinRoom() {\n        if (this.state.room !== \"\") {\n            this.setState({showPaint: true});\n        }\n    };\n\n    setRoom(room) {\n        if (this.state.artworkTitle === \"\") {\n            this.setState({room: room});\n            this.setState({paintBoardLink: \"/PaintBoard/room=\" + room});\n        }\n    }\n\n    setArtworkTitle(artworkTitle) {\n        this.setState({artworkTitle: artworkTitle});\n    }\n\n    render() {\n        return (\n            <div>\n                <div id='connectMetaMask'>\n                    <button onClick={this.connectMetaMask}>Connect MetaMask</button>\n                </div>\n                <Router>\n                    {!this.state.showPaint ? (\n                        <div className=\"App\">\n                            <div className=\"lobby\">\n                                <header>Welcome to collaborative paint and tokenizer!</header>\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Artwork Title\"\n                                    onChange={(event) => {\n                                    this.setArtworkTitle(event.target.value);\n                                    }}\n                                />\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Room ID\"\n                                    onChange={(event) => {\n                                    this.setRoom(event.target.value);\n                                    }}\n                                />\n                                <button onClick={this.joinRoom}>\n                                    <Link to={this.state.paintBoardLink}>Join a Room</Link>\n                                </button>\n                                <button onClick={this.startRoom}>\n                                    <Link to={this.state.paintBoardLink}>Create a Room</Link>\n                                </button>\n                            </div>\n                        </div>\n                    ) : (\n                        <Switch>\n                            <Route path={this.state.paintBoardLink}>\n                                <PaintBoard room={this.state.room} artworkTitle={this.state.artworkTitle} />\n                            </Route>\n                        </Switch>\n                    )}\n                </Router>\n            </div>\n        )\n    }\n}\n\nexport {export_accounts, export_contract};\nexport default New_Lobby;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Lobby from './Pages/Lobby/Lobby';\nimport * as serviceWorker from './helper/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Lobby />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}